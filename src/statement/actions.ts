
export function validateActions(actions: string[]): string[] {
  const result = actions.reduce(
    (accumulator, action) => {
      const valid = action.startsWith('iam:') ? validateIamAction(action) : true;
      if (!valid) {
        accumulator.push(`Invalid action '${action}'`);
      }
      return accumulator;
    }, [] as string[],
  );
  return result;
}

function validateIamAction(action: string): boolean {
  const iamActions = [
    'iam:AddClientIDToOpenIDConnectProvider',
    'iam:AddRoleToInstanceProfile',
    'iam:AddUserToGroup',
    'iam:AttachGroupPolicy',
    'iam:AttachRolePolicy',
    'iam:AttachUserPolicy',
    'iam:ChangePassword',
    'iam:CreateAccessKey',
    'iam:CreateAccountAlias',
    'iam:CreateGroup',
    'iam:CreateInstanceProfile',
    'iam:CreateLoginProfile',
    'iam:CreateOpenIDConnectProvider',
    'iam:CreatePolicy',
    'iam:CreatePolicyVersion',
    'iam:CreateRole',
    'iam:CreateSAMLProvider',
    'iam:CreateServiceLinkedRole',
    'iam:CreateServiceSpecificCredential',
    'iam:CreateUser',
    'iam:CreateVirtualMFADevice',
    'iam:DeactivateMFADevice',
    'iam:DeleteAccessKey',
    'iam:DeleteAccountAlias',
    'iam:DeleteAccountPasswordPolicy',
    'iam:DeleteCloudFrontPublicKey',
    'iam:DeleteGroup',
    'iam:DeleteGroupPolicy',
    'iam:DeleteInstanceProfile',
    'iam:DeleteLoginProfile',
    'iam:DeleteOpenIDConnectProvider',
    'iam:DeletePolicy',
    'iam:DeletePolicyVersion',
    'iam:DeleteRole',
    'iam:DeleteRolePermissionsBoundary',
    'iam:DeleteRolePolicy',
    'iam:DeleteSAMLProvider',
    'iam:DeleteServerCertificate',
    'iam:DeleteServiceLinkedRole',
    'iam:DeleteServiceSpecificCredential',
    'iam:DeleteSigningCertificate',
    'iam:DeleteSSHPublicKey',
    'iam:DeleteUser',
    'iam:DeleteUserPermissionsBoundary',
    'iam:DeleteUserPolicy',
    'iam:DeleteVirtualMFADevice',
    'iam:DetachGroupPolicy',
    'iam:DetachRolePolicy',
    'iam:DetachUserPolicy',
    'iam:DisableOrganizationsRootCredentialsManagement',
    'iam:DisableOrganizationsRootSessions',
    'iam:EnableMFADevice',
    'iam:EnableOrganizationsRootCredentialsManagement',
    'iam:EnableOrganizationsRootSessions',
    'iam:GenerateCredentialReport',
    'iam:GenerateOrganizationsAccessReport',
    'iam:GenerateServiceLastAccessedDetails',
    'iam:GetAccessKeyLastUsed',
    'iam:GetAccountAuthorizationDetails',
    'iam:GetAccountEmailAddress',
    'iam:GetAccountName',
    'iam:GetAccountPasswordPolicy',
    'iam:GetAccountSummary',
    'iam:GetCloudFrontPublicKey',
    'iam:GetContextKeysForCustomPolicy',
    'iam:GetContextKeysForPrincipalPolicy',
    'iam:GetCredentialReport',
    'iam:GetGroup',
    'iam:GetGroupPolicy',
    'iam:GetInstanceProfile',
    'iam:GetLoginProfile',
    'iam:GetMFADevice',
    'iam:GetOpenIDConnectProvider',
    'iam:GetOrganizationsAccessReport',
    'iam:GetPolicy',
    'iam:GetPolicyVersion',
    'iam:GetRole',
    'iam:GetRolePolicy',
    'iam:GetSAMLProvider',
    'iam:GetServerCertificate',
    'iam:GetServiceLastAccessedDetails',
    'iam:GetServiceLastAccessedDetailsWithEntities',
    'iam:GetServiceLinkedRoleDeletionStatus',
    'iam:GetSSHPublicKey',
    'iam:GetUser',
    'iam:GetUserPolicy',
    'iam:ListAccessKeys',
    'iam:ListAccountAliases',
    'iam:ListAttachedGroupPolicies',
    'iam:ListAttachedRolePolicies',
    'iam:ListAttachedUserPolicies',
    'iam:ListCloudFrontPublicKeys',
    'iam:ListEntitiesForPolicy',
    'iam:ListGroupPolicies',
    'iam:ListGroups',
    'iam:ListGroupsForUser',
    'iam:ListInstanceProfiles',
    'iam:ListInstanceProfilesForRole',
    'iam:ListInstanceProfileTags',
    'iam:ListMFADevices',
    'iam:ListMFADeviceTags',
    'iam:ListOpenIDConnectProviders',
    'iam:ListOpenIDConnectProviderTags',
    'iam:ListOrganizationsFeatures',
    'iam:ListPolicies',
    'iam:ListPoliciesGrantingServiceAccess',
    'iam:ListPolicyTags',
    'iam:ListPolicyVersions',
    'iam:ListRolePolicies',
    'iam:ListRoles',
    'iam:ListRoleTags',
    'iam:ListSAMLProviders',
    'iam:ListSAMLProviderTags',
    'iam:ListServerCertificates',
    'iam:ListServerCertificateTags',
    'iam:ListServiceSpecificCredentials',
    'iam:ListSigningCertificates',
    'iam:ListSSHPublicKeys',
    'iam:ListSTSRegionalEndpointsStatus',
    'iam:ListUserPolicies',
    'iam:ListUsers',
    'iam:ListUserTags',
    'iam:ListVirtualMFADevices',
    'iam:PassRole',
    'iam:PutGroupPolicy',
    'iam:PutRolePermissionsBoundary',
    'iam:PutRolePolicy',
    'iam:PutUserPermissionsBoundary',
    'iam:PutUserPolicy',
    'iam:RemoveClientIDFromOpenIDConnectProvider',
    'iam:RemoveRoleFromInstanceProfile',
    'iam:RemoveUserFromGroup',
    'iam:ResetServiceSpecificCredential',
    'iam:ResyncMFADevice',
    'iam:SetDefaultPolicyVersion',
    'iam:SetSecurityTokenServicePreferences',
    'iam:SetSTSRegionalEndpointStatus',
    'iam:SimulateCustomPolicy',
    'iam:SimulatePrincipalPolicy',
    'iam:TagInstanceProfile',
    'iam:TagMFADevice',
    'iam:TagOpenIDConnectProvider',
    'iam:TagPolicy',
    'iam:TagRole',
    'iam:TagSAMLProvider',
    'iam:TagServerCertificate',
    'iam:TagUser',
    'iam:UntagInstanceProfile',
    'iam:UntagMFADevice',
    'iam:UntagOpenIDConnectProvider',
    'iam:UntagPolicy',
    'iam:UntagRole',
    'iam:UntagSAMLProvider',
    'iam:UntagServerCertificate',
    'iam:UntagUser',
    'iam:UpdateAccessKey',
    'iam:UpdateAccountEmailAddress',
    'iam:UpdateAccountName',
    'iam:UpdateAccountPasswordPolicy',
    'iam:UpdateAssumeRolePolicy',
    'iam:UpdateCloudFrontPublicKey',
    'iam:UpdateGroup',
    'iam:UpdateLoginProfile',
    'iam:UpdateOpenIDConnectProviderThumbprint',
    'iam:UpdateRole',
    'iam:UpdateRoleDescription',
    'iam:UpdateSAMLProvider',
    'iam:UpdateServerCertificate',
    'iam:UpdateServiceSpecificCredential',
    'iam:UpdateSigningCertificate',
    'iam:UpdateSSHPublicKey',
    'iam:UpdateUser',
    'iam:UploadCloudFrontPublicKey',
    'iam:UploadServerCertificate',
    'iam:UploadSigningCertificate',
    'iam:UploadSSHPublicKey',
  ];
  const regexp = new RegExp(`^${action.replace('*', '.*').replaceAll('?', '.')}$`);
  const valid = iamActions.reduce(
    (accumulator, currentValue) => accumulator || regexp.test(currentValue),
    false,
  );
  return valid;
}
